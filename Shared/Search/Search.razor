@implements IAsyncDisposable

<form 
    class="mx-auto w-full max-w-lg flex flex-col gap-2"
    @onsubmit=@(OnSubmit)
>
    <label for="simple-search" class="sr-only">City Search</label>

    <div class="relative w-full bg-zinc-800 rounded-lg text-lg text-zinc-300 border border-zinc-900 border-2">
        <div class="absolute inset-y-0 start-0 flex items-center px-3 pointer-events-none">
            <span class="oi mt-1" data-glyph="location"></span>
        </div>

        <input
            @ref=@(inputRef)
            type="text"
            class="px-10 p-2.5 w-full rounded-lg bg-transparent placeholder:text-gray-400"
            placeholder="Search city..."
            @oninput=@(OnInput)
            @onkeydown=@(OnKeyDown)
            @onfocus=@(OnInputFocused)
            @onblur=@(OnInputBlurred)
        />

        <button 
            type="submit"
            disabled=@(string.IsNullOrEmpty(currentQuery))
            class="absolute inset-y-0 end-0 px-4 ms-2 bg-zinc-900 rounded-e-lg disabled:bg-transparent disabled:text-zinc-500 hover:bg-zinc-700 active:bg-zinc-800"
        >
            <span class="oi" data-glyph="magnifying-glass"></span>
            <span class="sr-only">Search</span>
        </button>
    </div>

    <div class="w-full bg-zinc-800 rounded-lg text-lg text-zinc-300 border border-zinc-900 border-2 @(resultsDisplay)">
        @for (int i = 0; i < searchResults.Count; ++i) {
            int iCopy = i; // We need to copy `i` because its passed BY REFERENCE into the lambda for OnSelect... ffs
            <SearchResult
                Pseudofocused="@(focusedSearchResult == i)"
                City=@(searchResults[i].City)
                State=@(searchResults[i].State)
                Country=@(searchResults[i].Country)
                Confidence=@(searchResults[i].Confidence)
                OnSelect="@(() => GeocodeSelected?.Invoke(searchResults[iCopy].ResolvedGeocode))"
            />
        }
    </div>
</form>

@code {
    private const int NO_RESULT_FOCUSED = -1;

    [Parameter] public Geocode? Geobias {get;set;}
    [Parameter] public Action<Geocode>? GeocodeSelected {get;set;}

    [Inject] private IJSRuntime JS {get;set;} = null!;
    [Inject] private LocationSearchService locationSearchService {get;set;} = null!;

    private bool searchHasFocus {get;set;} = false;
    private string currentQuery {get;set;} = "";
    private List<GeocodeOption> searchResults {get;set;} = new();
    private int focusedSearchResult = NO_RESULT_FOCUSED;
        
    // JS interop stuff for suppressing arrow up/down on the search field
    private IJSObjectReference? searchJSModule = null;
    private ElementReference? inputRef = null;

    private string resultsDisplay => 
        (searchHasFocus && !string.IsNullOrWhiteSpace(currentQuery) && searchResults.Count > 0)
            ? ""
            : "hidden";

    protected override void OnParametersSet()
        => locationSearchService.UpdateGeobias(Geobias);

    protected override void OnInitialized()
        => locationSearchService.ResultsUpdated += UpdateSearchResults;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        searchJSModule ??= await JS.InvokeAsync<IJSObjectReference>(
            "import", 
            "./Shared/Search/Search.razor.js"
        );

        await searchJSModule.InvokeVoidAsync("registerSearchField", inputRef);
    }

    private void OnInputFocused()
    {
        searchHasFocus = true;
        focusedSearchResult = NO_RESULT_FOCUSED;
    }

    private void OnInputBlurred()
    {
        searchHasFocus = false;
        focusedSearchResult = NO_RESULT_FOCUSED;
    }

    private void OnInput(ChangeEventArgs eventArgs)
    {
        locationSearchService.UpdateQuery(currentQuery = eventArgs.Value?.ToString() ?? "");

        // reset the pseudo-focused index to -1 (nothing focused)
        focusedSearchResult = NO_RESULT_FOCUSED;
    }

    private void OnKeyDown(KeyboardEventArgs args)
    {
        // Can't navigate 0 results :P
        if (searchResults.Count <= 0)
        {
            return;
        }

        if (args.Key == "ArrowUp")
        {
            focusedSearchResult = Math.Clamp(focusedSearchResult - 1, 0, searchResults.Count - 1);
        }
        else if (args.Key == "ArrowDown")
        {
            focusedSearchResult = Math.Clamp(focusedSearchResult + 1, 0, searchResults.Count - 1);
        }
    }

    private void OnSubmit()
    {
        if (focusedSearchResult != NO_RESULT_FOCUSED)
        {
            GeocodeSelected?.Invoke(searchResults[focusedSearchResult].ResolvedGeocode);
        }
        else if (searchResults.Count > 0)
        {
            GeocodeSelected?.Invoke(searchResults[0].ResolvedGeocode);
        }
    }

    private void UpdateSearchResults(IEnumerable<GeocodeOption> newResults)
    {
        searchResults = newResults
                            .OrderByDescending(r => r.Confidence)
                            .Take(5)
                            .ToList();
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        await (searchJSModule?.DisposeAsync() ?? ValueTask.CompletedTask);
    }
}
