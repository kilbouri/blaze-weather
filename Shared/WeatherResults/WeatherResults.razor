@using BlazorTime

<div class="@GLASSMORPHIC_PANEL w-full max-w-3xl">
        <p class="text-xl font-medium">@(Weather.Description)</p>
        <hr class="border-white/50">

        @if(SelectedOption != null) {
            <div class="flex flex-wrap items-baseline justify-between text-zinc-400">
                <span>@(SelectedOption.City), @(SelectedOption.State)</span>
                <span><ToLocal DateTime="@(Weather.Updated)" Format="DDDD' at 'HH:MM" /></span>
            </div>
        }

        <div class="flex items-center gap-12">
            @* Icon and current temperature *@
            <div class="flex items-center gap-4 text-6xl whitespace-nowrap">
                <WeatherIcon Url=@(Weather.IconUrl) Description=@(Weather.Description) />
                <TemperatureDisplay Temperature="@(ToPreferredUnit(Weather.CurrentTemp))" />
            </div>

            @* extra temps and wind *@
            <div class="flex flex-col flex-grow">
                <span class="text-xl">
                    <span class="text-base text-zinc-400">feels like</span>
                    <TemperatureDisplay ShowUnit=false Temperature="@(ToPreferredUnit(Weather.FeelsLike))" />
                </span>
                <span class="text-xl">
                    <span class="text-base text-zinc-400">min</span>
                    <TemperatureDisplay ShowUnit=false Temperature="@(ToPreferredUnit(Weather.MinTemp))" />
                </span>
                <span class="text-xl">
                    <span class="text-base text-zinc-400">max</span>
                    <TemperatureDisplay ShowUnit=false Temperature="@(ToPreferredUnit(Weather.MaxTemp))" />
                </span>
                <span class="text-xl">
                    <span class="text-base text-zinc-400">humidity</span>
                    <span>@(Weather.HumidityPerecent)%</span>
                </span>
            </div>
            <div class="flex flex-col items-end">
                <span class="text-xl">
                    <span class="text-base text-zinc-400">wind speed</span>
                    <span>@(Weather.WindSpeed) m/s</span>
                </span>
                <span class="text-xl">
                    <span class="text-base text-zinc-400">wind gust</span>
                    <span>@(Weather.WindGust) m/s</span>
                </span>
                <span class="text-xl">
                    <span class="text-base text-zinc-400">direction</span>
                    <span>@(Weather.WindDegrees)Â°</span>
                </span>
                <span class="text-xl">
                    <span class="text-base text-zinc-400">cloud cover</span>
                    <span>@(Weather.CloudsPercent)%</span>
                </span>
            </div>
        </div>
</div>


@code {
    private const string GLASSMORPHIC_PANEL = "p-4 bg-opacity-75 border border-2 rounded-lg bg-clip-padding backdrop-filter backdrop-blur-sm bg-zinc-800 text-zinc-300 border-zinc-900";

    [Parameter] public Weather Weather {get;set;} = default;
    [Parameter] public GeocodeOption? SelectedOption {get;set;}

    [Inject] IReverseGeocoderService reverseGeocoder {get;set;} = null!;

    protected override async Task OnInitializedAsync()
    {
        // Attempt to reverse geocode the location the weather is located on if
        // we aren't also provided the Geocode Option
        if (SelectedOption == null)
        {
            var results = await reverseGeocoder.GetGeocodeOptions(Weather.Location);
            SelectedOption = results.FirstOrDefault(defaultValue: null);
        }
    }

    private Temperature ToPreferredUnit(Temperature temp)
    {
        return temp.ToUnit(TemperatureUnit.Celsius);
    }
}
