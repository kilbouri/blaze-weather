@using BlazorTime

<div class="@GLASSMORPHIC_PANEL w-full max-w-sm sm:max-w-3xl">
    <p class="text-xl font-medium">@(Weather.Description)</p>
    
    <hr class="border-white/50">

    <div class="flex flex-wrap items-baseline justify-between text-zinc-400">
        @if(SelectedOption != null) {
            <span>@(SelectedOption.City), @(SelectedOption.State)</span>
        }
        
        <span><ToLocal DateTime="@(Weather.Updated)" Format="DDDD' at 'HH:MM" /></span>
    </div>

    <div class="flex flex-col items-start gap-4 sm:items-center sm:flex-row">
        <div class="flex flex-wrap text-6xl place-content-center whitespace-nowrap">
            <WeatherIcon Url=@(Weather.IconUrl) Description=@(Weather.Description) />
            <TemperatureDisplay Temperature="@(ToPreferredUnit(Weather.Current))" />
        </div>

        <div class="flex flex-col flex-grow">
            <DataDisplay>
                <Label>feels like</Label>
                <Value>
                    <TemperatureDisplay ShowUnit=false Temperature="@(ToPreferredUnit(Weather.FeelsLike))" />
                </Value>
            </DataDisplay>
            <DataDisplay>
                <Label>min</Label>
                <Value>
                    <TemperatureDisplay ShowUnit=false Temperature="@(ToPreferredUnit(Weather.Min))" />
                </Value>
            </DataDisplay>
            <DataDisplay>
                <Label>max</Label>
                <Value>
                    <TemperatureDisplay ShowUnit=false Temperature="@(ToPreferredUnit(Weather.Max))" />
                </Value>
            </DataDisplay>
            <DataDisplay>
                <Label>humidity</Label>
                <Value>@Weather.HumidityPerecent.ToString("0.")</Value>
                <Unit>%</Unit>
            </DataDisplay>
        </div>
        
        <div class="flex flex-col sm:items-end">
            <DataDisplay>
                <Label>wind</Label>
                <Value>
                    @Weather.WindDirection.ShortRepresentation @Weather.Wind.ToUnit(SpeedUnit.KilometersPerHour).Value.ToString("0.#")</Value>
                <Unit>@Weather.Wind.ToUnit(SpeedUnit.KilometersPerHour).UnitAbbreviation</Unit>
            </DataDisplay>
            <DataDisplay>
                <Label>gust</Label>
                <Value>@Weather.WindGust.ToUnit(SpeedUnit.KilometersPerHour).Value.ToString("0.#")</Value>
                <Unit>@Weather.WindGust.ToUnit(SpeedUnit.KilometersPerHour).UnitAbbreviation</Unit>
            </DataDisplay>
            <DataDisplay>
                <Label>cloud cover</Label>
                <Value>@Weather.CloudsPercent</Value>
                <Unit>%</Unit>
            </DataDisplay>
            <DataDisplay>
                <Label>visibility</Label>
                <Value>@Weather.Visibility.ToUnit(LengthUnit.Kilometers).Value.ToString("0.##")</Value>
                <Unit>@Weather.Visibility.ToUnit(LengthUnit.Kilometers).UnitAbbreviation</Unit>
            </DataDisplay>
        </div>
    </div>
</div>


@code {
    private const string GLASSMORPHIC_PANEL = "p-4 bg-opacity-75 border border-2 rounded-lg bg-clip-padding backdrop-filter backdrop-blur-sm bg-zinc-800 text-zinc-300 border-zinc-900";

    [Parameter] public Weather Weather {get;set;} = default;
    [Parameter] public GeocodeOption? SelectedOption {get;set;}

    [Inject] IReverseGeocoderService reverseGeocoder {get;set;} = null!;

    protected override async Task OnInitializedAsync()
    {
        // Attempt to reverse geocode the location the weather is located on if
        // we aren't also provided the Geocode Option
        if (SelectedOption == null)
        {
            var results = await reverseGeocoder.GetGeocodeOptions(Weather.Location);
            SelectedOption = results.FirstOrDefault(defaultValue: null);
        }
    }

    private Temperature ToPreferredUnit(Temperature temp)
    {
        return temp.ToUnit(TemperatureUnit.Celsius);
    }
}
