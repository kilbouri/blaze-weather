<form class="max-w-lg w-full relative">
    <div class="relative text-zinc-900 text-lg">
        <input
            type="text"
            placeholder="City"
            @oninput=@(QueryChanged)
            id="citySearch"
            class="bg-white/40 backdrop-blur-sm font-medium placeholder:text-zinc-700 w-full px-4 py-2 border-white/40 border-2 rounded-lg outline-none"
        >

        <button 
            title="Search"
            class="absolute top-0 bottom-0 right-0
                    px-4 py-2 align-middle
                    border-2 border-transparent"
        >
            <span class="oi align-middle" data-glyph="magnifying-glass"></span>
        </button>
    </div>


    @if (SearchResults?.Any() ?? false) {
        <div class="absolute bg-white/40 border-white/40 border-2 top-full mt-2 rounded-lg left-0 right-0 backdrop-blur-sm overflow-auto">
            <ol>
                @foreach (GeocodeOption result in SearchResults.Take(5)) {
                    <li>
                        <LocationSearchResult 
                            City=@(result.City) 
                            State=@(result.State) 
                            Country=@(result.Country) 
                            Confidence=@(result.Confidence)
                            OnSelect=@(() => HandleItemClicked(result))
                        />
                    </li>
                }
            </ol>
        </div>
    }
</form>

@code {
    [Parameter] public Geocode? Geobias {get;set;} = null;
    [Parameter] public Action<GeocodeOption> OnResultSelected {get;set;} = (r) => {};

    [Inject] private LocationSearchService locationSearchService {get;set;} = null!;

    // TODO: Some way to detect ratelimiting so we can somehow switch geocoders/indicate service unavailable

    List<GeocodeOption>? SearchResults;

    protected override void OnInitialized()
    {
        locationSearchService.ResultsUpdated += (results) => {
            Console.WriteLine(results.Count());
            this.SearchResults = results
                                .OrderByDescending(result => result.Confidence)
                                .ToList();

            InvokeAsync(StateHasChanged);
        };
    }

    protected override void OnParametersSet()
    {
        locationSearchService.UpdateGeobias(Geobias);
    }

    private void QueryChanged(ChangeEventArgs args)
    {
        string newQuery = args.Value?.ToString() ?? "";

        locationSearchService.UpdateQuery(newQuery);

        // clear search results when box is cleared
        if (string.IsNullOrWhiteSpace(newQuery)) {
            SearchResults = null;
        }
    }

    private void HandleItemClicked(GeocodeOption selected)
    {
        Console.WriteLine(selected);
    }
}
