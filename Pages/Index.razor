@page "/"
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@inject NavigationManager navigationManager

<div
    id="searchContainer"
    class="mx-auto flex flex-col items-center gap-8 px-2 transition-all pt-[25dvh] data-[gc-selected=True]:pt-[10dvh]"
    data-gc-selected=@(selectedGeocode.HasValue.ToString())
>
    <h1
        class="text-3xl font-semibold text-white"
        style="text-shadow: 0px 0px 48px black"
    >
        <BlazeLogo />
    </h1>

    <Search Geobias="@(geobias)" GeocodeSelected="(g) => this.GeocodeSelected(g)" />

    @if (selectedGeocode.HasValue) {
        @if (!weatherTask?.IsCompleted ?? true) {
            <Spinner />
        } else if (weatherTask?.IsCompletedSuccessfully ?? false) {
            if (weatherTask?.Result.HasValue ?? false) {
                <WeatherResults Weather=@(weatherTask.Result.Value) />
            } else {
                // weather service could not find weather
            }
        } else {
            // some other error
        }
    }
</div>

@if (geobias.HasValue) {
    <div class="fixed pointer-events-none bottom-0 text-white/50 p-1 text-xs flex items-center">
        <span data-glyph="map-marker" class="oi"></span>
        <span class="ps-1 pb-[1px]">
            @(geobias.Value.Latitude.ToString(".####")), 
            @(geobias.Value.Longitude.ToString(".####"))
            (based on your IP address)
        </span>
    </div>
}

@code {
    [Inject] BlazeWeatherContext context {get;set;} = null!;
    [Inject] IGeolocationService geolocationService {get;set;} = null!;
    [Inject] IWeatherService weatherService {get;set;} = null!;
    [Inject] IWebHostEnvironment environment {get;set;} = null!;

    [Parameter] [SupplyParameterFromQuery] public double? Lat {get;set;} = default;
    [Parameter] [SupplyParameterFromQuery] public double? Lon {get;set;} = default;

    private Geocode? geobias = null;
    private Geocode? selectedGeocode {get;set;} = null;

    private Task<Weather?>? weatherTask = null;

    protected override async Task OnInitializedAsync()
    {
        // During development the IP will be a local one, and thus not
        // possible to geocode. Therefore, we null it out to use the server's
        // IP for geolocation (since they are the same machine)
        if (environment.IsDevelopment()) {
            context.CurrentUserIP = null;
        }

        if (environment.IsDevelopment() || context.CurrentUserIP != null) {
            geobias = await geolocationService.GeolocateIpAddress(context.CurrentUserIP);
        }
        
        if (Lat.HasValue && Lon.HasValue)
        {
            // navigate must be false or an infinite loop will be created... lol
            await GeocodeSelected(new Geocode()
            {
                Latitude = Lat.Value,
                Longitude = Lon.Value
            }, navigate: false);
        }
    }

    private async Task GeocodeSelected(Geocode geocode, bool navigate = true)
    {
        selectedGeocode = geocode;
        weatherTask = weatherService.GetCurrentWeather(geocode.Latitude, geocode.Longitude);

        if (navigate)
        {
            string newUri = navigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>() {
                { "lat", geocode.Latitude },
                { "lon", geocode.Longitude }
            }.AsReadOnly());
            navigationManager.NavigateTo(newUri);
        }
        

        _ = InvokeAsync(StateHasChanged);

        await weatherTask;
        _ = InvokeAsync(StateHasChanged);
    }
}
