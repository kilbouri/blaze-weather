@page "/"
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting

<div
    id="searchContainer"
    class="mx-auto pt-[25dvh] flex flex-col items-center gap-8 px-2"
>
    <h1
        class="text-3xl font-semibold text-white"
        style="text-shadow: 0px 0px 48px black"
    >
        <BlazeLogo />
    </h1>

    <Search />
</div>

@if (geobias.HasValue)
{
    <div class="absolute bottom-0 text-white/50 p-1 text-xs flex items-center">
        <span data-glyph="map-marker" class="oi"></span>
        <span class="ps-1 pb-[1px]">
            @(geobias.Value.Latitude.ToString(".####")), 
            @(geobias.Value.Longitude.ToString(".####"))
            (based on your IP address)
        </span>
    </div>
}

@code {
    [Inject] BlazeWeatherContext context {get;set;} = null!;
    [Inject] IGeolocationService geolocationService {get;set;} = null!;
    [Inject] IWebHostEnvironment environment {get;set;} = null!;

    private Geocode? geobias = null;

    protected override async Task OnInitializedAsync()
    {
        // During development the IP will be a local one, and thus not
        // possible to geocode. Therefore, we null it out to use the server's
        // IP for geolocation (since they are the same machine)
        if (environment.IsDevelopment()) {
            context.CurrentUserIP = null;
        }

        if (!environment.IsDevelopment() && context.CurrentUserIP == null) {
            Console.WriteLine("Failed to retrieve user IP address for geolocation");
        } else {
            geobias = await geolocationService.GeolocateIpAddress(context.CurrentUserIP);
            if (geobias.HasValue) {
                Console.WriteLine(geobias.Value);
            } else {
                Console.WriteLine("Failed to geocode user IP address");
            }
        }
    }
}
