@page "/"
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@inject NavigationManager navigationManager

<div
    id="searchContainer"
    class="mx-auto flex flex-col items-center gap-8 px-2 transition-all pt-[25dvh] data-[gc-selected=True]:pt-[10dvh]"
    data-gc-selected=@(currentGeocode.HasValue.ToString())
>
    <h1
        class="text-3xl font-semibold text-white"
        style="text-shadow: 0px 0px 48px black"
    >
        <BlazeLogo />
    </h1>

    <Search Geobias="@(geobias)" GeocodeOptionSelected="(g) => _ = this.GeocodeOptionSelected(g)" />

    @if (currentGeocode.HasValue) {
        @if (!weatherTask?.IsCompleted ?? true) {
            <Spinner />
        } else if (weatherTask?.IsCompletedSuccessfully ?? false) {
            if (weatherTask?.Result.HasValue ?? false) {
                <WeatherResults Weather=@(weatherTask.Result.Value) SelectedOption=@(selectedOption) />
            } else {
                // weather service could not find weather
            }
        } else {
            // some other error
        }
    }
</div>

@if (geobias.HasValue) {
    <div class="fixed pointer-events-none bottom-0 text-white/50 p-1 text-xs flex items-center">
        <span data-glyph="map-marker" class="oi"></span>
        <span class="ps-1 pb-[1px]">
            @(geobias.Value.Latitude.ToString(".####")), 
            @(geobias.Value.Longitude.ToString(".####"))
            (based on your IP address)
        </span>
    </div>
}

@code {
    [Inject] BlazeWeatherContext context {get;set;} = null!;
    [Inject] IGeolocationService geolocationService {get;set;} = null!;
    [Inject] IWeatherService weatherService {get;set;} = null!;
    [Inject] IWebHostEnvironment environment {get;set;} = null!;

    [Parameter] [SupplyParameterFromQuery] public double? Lat {get;set;} = default;
    [Parameter] [SupplyParameterFromQuery] public double? Lon {get;set;} = default;

    private Geocode? geobias;

    // The selected geocode option, if the geocode was set by selecting a geocode
    private GeocodeOption? selectedOption {get;set;}

    // The current geocode. May be fetched from query params or via search
    private Geocode? currentGeocode {get;set;}

    private Task<Weather?>? weatherTask;

    protected override async Task OnInitializedAsync()
    {
        // During development the IP will be a local one, and thus not
        // possible to geocode. Therefore, we null it out to use the server's
        // IP for geolocation (since they are the same machine)
        if (environment.IsDevelopment()) {
            context.CurrentUserIP = null;
        }

        Task<Geocode?>? geobiasTask = null; 
        if (environment.IsDevelopment() || context.CurrentUserIP != null) {
            geobiasTask = geolocationService.GeolocateIpAddress(context.CurrentUserIP);
        }
        
        if (Lat.HasValue && Lon.HasValue)
        {
            // navigate must be false or an infinite loop will be created... lol
            GeocodeLoaded(new Geocode()
            {
                Latitude = Lat.Value,
                Longitude = Lon.Value
            }, navigate: false);
        }

        if (geobiasTask != null)
        {
            geobias = await geobiasTask;
        }
    }

    private async Task GeocodeOptionSelected(GeocodeOption option, bool navigate = true)
    {
        selectedOption = option;
        GeocodeLoaded(option.Geocode, navigate);

        await Task.WhenAll(
            InvokeAsync(StateHasChanged), 
            weatherTask!
        );
        
        // This seems to fix the following StateHasChanged being ignored intermittently.
        // Based on the author's edit here: https://stackoverflow.com/q/58932854
        // 
        // Further, it seems that Blazor intentionally ignores the second StateHasChanged
        // when the previous render completes after the weather update completes.
        // https://github.com/dotnet/aspnetcore/issues/14591
        await Task.CompletedTask;
        await InvokeAsync(StateHasChanged);
    }

    private void GeocodeLoaded(Geocode code, bool navigate = true)
    {
        currentGeocode = code;
        weatherTask = weatherService.GetCurrentWeather(code.Latitude, code.Longitude);

        if (navigate)
        {
            string newUri = navigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>() {
                { "lat", code.Latitude },
                { "lon", code.Longitude }
            }.AsReadOnly());
            navigationManager.NavigateTo(newUri);
        }
    }
}
